@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header" style="background-color: rgba(255, 255, 255, 1); display:flex; justify-content: space-between; align-items: center; position: sticky; top: 0;">Изменить решения уязвимости

                    <a href="{{ route('home') }}" class="btn btn-warning">На главную</a>
                </div>

                <div class="card-body">
                    <form action="{{ route('report.update_vulnerability', $vulnerability->id) }}" method="POST" enctype="multipart/form-data">
                        @csrf
                        @method('PUT')

                        <!-- Добавляем чекбокс -->
                        <div class="form-group">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="not_used" id="not_used" {{ $vulnerability->not_used ? 'checked' : '' }}>
                                <label class="form-check-label" for="not_used">
                                    Не используется в обособленном подразделении
                                </label>
                            </div>
                        </div>

                        <!-- Остальные элементы формы -->
                        <div id="form-elements">
                            <div class="form-group">
                                <label for="real_solutions">Реальные решения</label>
                                @if($vulnerability->realSolutions !== null)
                                @foreach($vulnerability->realSolutions as $solution)
                                <div class="form-group real-solution-group" data-solution-id="{{ $solution->id }}">
                                    <div class="quill-editor" data-solution-id="{{ $solution->id }}">{!! $solution->solution !!}</div>
                                    <input type="hidden" name="real_solutions[{{ $solution->id }}]" class="quill-html">

                                    <!-- Поле загрузки файла для существующих реальных решений -->
                                    <label for="real_solutions_{{ $solution->id }}_file" class="form-label mt-2">Загрузить файл</label>
                                    <input type="file" name="real_solutions_files[{{ $solution->id }}]" class="form-control">
                                    @if ($solution->path_to_file !== null)
                                    <a href="{{ route('download.file', $solution->id) }}" target="_blank" class="btn btn-primary btn-sm mt-2">Скачать файл</a>
                                    @endif

                                    <button type="button" class="btn btn-danger btn-sm remove-real-solution mt-2">Удалить</button>
                                </div>
                                @endforeach
                                @endif
                                <button type="button" class="btn btn-primary mt-3" id="addRealSolution">Добавить новое реальное решение</button>
                                <div id="realSolutionsContainer"></div>

                                <label for="compensating_solutions" class="mt-4">Компенсирующие решения</label>
                                <div id="compensatingSolutionsContainer">
                                    <select id="compensatingSolutionsSelect" class="form-control select2 mb-2">
                                        @foreach($compensating as $solution)
                                        @if(!$vulnerability->compensatingSolutions->contains($solution->id))
                                        <option value="{{ $solution->id }}">{{ $solution->measure }}</option>
                                        @endif
                                        @endforeach
                                    </select>
                                    <button type="button" class="btn btn-primary mt-3" id="addCompensatingSolution">Добавить решение</button>
                                </div>
                                <div id="selectedCompensatingSolutionsContainer">
                                    @if ($vulnerability->compensatingSolutions !== null)
                                    @foreach($vulnerability->compensatingSolutions as $solution)
                                    <div class="selected-solution" data-id="{{ $solution->id }}">
                                        {{ $solution->measure }}
                                        <button type="button" class="btn btn-danger btn-sm remove-solution">Удалить</button>
                                        <input type="hidden" name="compensating_solutions[]" value="{{ $solution->id }}">
                                    </div>
                                    @endforeach
                                    @endif
                                </div>
                            </div>


                        </div>
                        <div class="form-group mt-4" style="display: flex; justify-content: space-between;">
                            <button type="submit" class="btn btn-success">Сохранить</button>
                            <a href="{{ route('report.all_vulnerabilites', $document->id) }}" class="btn btn-secondary">Отмена</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

@section('scripts')
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {

        // Функция для скрытия/отображения элементов формы
        function toggleFormElements() {
            const notUsedCheckbox = document.getElementById('not_used');
            const formElements = document.getElementById('form-elements');

            if (notUsedCheckbox.checked) {
                formElements.style.display = 'none';
            } else {
                formElements.style.display = 'block';
            }
        }

        // Инициализация состояния формы при загрузке страницы
        toggleFormElements();

        // Обработчик изменения состояния чекбокса
        document.getElementById('not_used').addEventListener('change', toggleFormElements);

        // Остальной JavaScript код
        document.getElementById('addRealSolution').addEventListener('click', function() {
            var container = document.getElementById('realSolutionsContainer');
            var solutionGroup = document.createElement('div');
            solutionGroup.className = 'form-group real-solution-group';

            var quillContainer = document.createElement('div');
            quillContainer.className = 'quill-editor';
            solutionGroup.appendChild(quillContainer);

            var hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'new_real_solutions[]';
            hiddenInput.className = 'quill-html';
            solutionGroup.appendChild(hiddenInput);

            // Поле загрузки файла
            var fileInputLabel = document.createElement('label');
            fileInputLabel.className = 'form-label mt-2';
            fileInputLabel.textContent = 'Загрузить файл';
            solutionGroup.appendChild(fileInputLabel);

            var fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.name = 'new_real_solutions_files[]';
            fileInput.className = 'form-control';
            solutionGroup.appendChild(fileInput);

            var removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.className = 'btn btn-danger btn-sm remove-real-solution mt-2';
            removeButton.textContent = 'Удалить';
            solutionGroup.appendChild(removeButton);

            container.appendChild(solutionGroup);

            var quill = new Quill(quillContainer, {
                theme: 'snow',
                modules: {
                    toolbar: {
                        container: [
                            [{
                                'header': [1, 2, 3, 4, 5, 6, false]
                            }],
                            ['bold', 'italic', 'underline', 'strike'],
                            [{
                                'color': []
                            }, {
                                'background': []
                            }],
                            [{
                                'list': 'ordered'
                            }, {
                                'list': 'bullet'
                            }],
                            ['link', 'image'],
                            ['clean']
                        ],
                        handlers: {
                            'image': function() {
                                var range = this.quill.getSelection();
                                var input = document.createElement('input');
                                input.setAttribute('type', 'file');
                                input.setAttribute('accept', 'image/*');
                                input.click();
                                input.onchange = function() {
                                    var file = input.files[0];
                                    var formData = new FormData();
                                    formData.append('image', file);

                                    fetch('/upload-image', {
                                            method: 'POST',
                                            body: formData,
                                            headers: {
                                                'X-CSRF-TOKEN': '{{ csrf_token() }}'
                                            }
                                        }).then(response => response.json())
                                        .then(data => {
                                            if (data.url) {
                                                var index = range ? range.index : 0;
                                                this.quill.insertEmbed(index, 'image', data.url);
                                                this.quill.setSelection(index + 1);
                                            }
                                        });
                                }.bind(this);
                            }
                        }
                    }
                }
            });

            quill.on('text-change', function() {
                hiddenInput.value = quill.root.innerHTML;
            });

            hiddenInput.value = quill.root.innerHTML;
        });

        document.querySelectorAll('.quill-editor').forEach(function(editorContainer) {
            var solutionId = editorContainer.dataset.solutionId;
            var hiddenInput = editorContainer.nextElementSibling;

            var quill = new Quill(editorContainer, {
                theme: 'snow',
                modules: {
                    toolbar: {
                        container: [
                            [{
                                'header': [1, 2, 3, 4, 5, 6, false]
                            }],
                            ['bold', 'italic', 'underline', 'strike'],
                            [{
                                'color': []
                            }, {
                                'background': []
                            }],
                            [{
                                'list': 'ordered'
                            }, {
                                'list': 'bullet'
                            }],
                            ['link', 'image'],
                            ['clean']
                        ],
                        handlers: {
                            'image': function() {
                                var range = this.quill.getSelection();
                                var input = document.createElement('input');
                                input.setAttribute('type', 'file');
                                input.setAttribute('accept', 'image/*');
                                input.click();
                                input.onchange = function() {
                                    var file = input.files[0];
                                    var formData = new FormData();
                                    formData.append('image', file);

                                    fetch('/upload-image', {
                                            method: 'POST',
                                            body: formData,
                                            headers: {
                                                'X-CSRF-TOKEN': '{{ csrf_token() }}'
                                            }
                                        }).then(response => response.json())
                                        .then(data => {
                                            if (data.url) {
                                                var index = range ? range.index : 0;
                                                this.quill.insertEmbed(index, 'image', data.url);
                                                this.quill.setSelection(index + 1);
                                            }
                                        });
                                }.bind(this);
                            }
                        }
                    }
                }
            });

            quill.on('text-change', function() {
                hiddenInput.value = quill.root.innerHTML;
            });

            hiddenInput.value = quill.root.innerHTML;
        });

        // Remove real solution
        document.querySelectorAll('.remove-real-solution').forEach(function(button) {
            button.addEventListener('click', function() {
                var solutionGroup = button.parentElement;
                solutionGroup.remove();
            });
        });

        // Remove newly added real solution
        document.getElementById('realSolutionsContainer').addEventListener('click', function(event) {
            if (event.target.classList.contains('remove-real-solution')) {
                var solutionGroup = event.target.parentElement;
                solutionGroup.remove();
            }
        });

        const compensatingSolutionsContainer = document.getElementById('selectedCompensatingSolutionsContainer');
        const compensatingSolutionsSelect = document.getElementById('compensatingSolutionsSelect');

        document.getElementById('addCompensatingSolution').addEventListener('click', function() {
            const selectedOption = compensatingSolutionsSelect.options[compensatingSolutionsSelect.selectedIndex];
            if (selectedOption && selectedOption.value) {
                const solutionDiv = document.createElement('div');
                solutionDiv.className = 'selected-solution';
                solutionDiv.dataset.id = selectedOption.value;
                solutionDiv.innerHTML = `
                    ${selectedOption.text}
                    <button type="button" class="btn btn-danger btn-sm remove-solution">Удалить</button>
                    <input type="hidden" name="compensating_solutions[]" value="${selectedOption.value}">
                `;
                compensatingSolutionsContainer.appendChild(solutionDiv);
                compensatingSolutionsSelect.remove(compensatingSolutionsSelect.selectedIndex);
            }
        });

        // Удаление компенсирующего решения
        compensatingSolutionsContainer.addEventListener('click', function(event) {
            if (event.target.classList.contains('remove-solution')) {
                const solutionDiv = event.target.closest('.selected-solution');
                const solutionId = solutionDiv.dataset.id;
                const option = document.createElement('option');
                option.value = solutionId;
                option.text = solutionDiv.firstChild.textContent.trim();
                compensatingSolutionsSelect.appendChild(option);
                solutionDiv.remove();
            }
        });

        // Инициализация select2
        $('.select2').select2({
            language: {
                noResults: function() {
                    return `<button type="button" class="btn btn-secondary btn-sm" id="addNewCompensatingSolutionInSelect">Добавить новое решение</button>`;
                }
            },
            escapeMarkup: function(markup) {
                return markup;
            }
        });

        // Обработка клика по кнопке "Добавить новое решение" внутри select2
        $(document).on('click', '#addNewCompensatingSolutionInSelect', function() {
            const newSolutionText = document.querySelector('.select2-search__field').value; // Получаем текст введенного решения

            if (newSolutionText) {
                // Отправляем запрос на создание нового решения
                fetch("{{ route('save.compensating.solution') }}", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': '{{ csrf_token() }}'
                        },
                        body: JSON.stringify({
                            measure: newSolutionText
                        })
                    }).then(response => response.json())
                    .then(data => {
                        if (data.id) {
                            // Добавляем новое решение в выпадающий список
                            const option = document.createElement('option');
                            option.value = data.id;
                            option.text = newSolutionText;

                            // Обновляем select2 с новым решением
                            $('#compensatingSolutionsSelect').append(option).trigger('change');

                            // Автоматически выбираем только что добавленное решение в select2
                            $('#compensatingSolutionsSelect').val(data.id).trigger('change');

                            // Закрываем окно поиска в select2
                            $('.select2-search__field').val(''); // очищаем поле поиска
                            $('#compensatingSolutionsSelect').select2('close'); // закрываем select2
                        }
                    });
            }
        });

        // Инициализация видимости кнопки

    });
</script>
@endsection