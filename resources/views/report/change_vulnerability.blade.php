@extends('layouts.app')

@section('content')
<!-- Подключаем Tailwind CSS -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="min-h-screen bg-gray-100 p-6">
    <!-- Шапка -->
    <div class="sticky top-0 z-10 bg-white shadow-lg rounded-lg mb-6">
        <div class="flex justify-between items-center p-4">
            <h1 class="text-2xl font-bold text-gray-800">Изменить решения уязвимости - {{ $vulnerability->name }}</h1>
            <a href="{{ route('home') }}" class="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition duration-300">На главную</a>
        </div>
    </div>

    <!-- Основной контент -->
    <div class="bg-white rounded-lg shadow-lg p-6 max-w-3xl mx-auto">
        <!-- Форма -->
        <form action="{{ route('report.update_vulnerability', $vulnerability->id) }}" method="POST" enctype="multipart/form-data">
            @csrf
            @method('PUT')

            <!-- Чекбокс "Не используется в обособленном подразделении" -->
            <div class="mb-6">
                <label class="inline-flex items-center">
                    <input type="checkbox" name="not_used" id="not_used" class="form-checkbox h-5 w-5 text-blue-600" {{ $vulnerability->not_used ? 'checked' : '' }}>
                    <span class="ml-2 text-gray-700">Не используется в обособленном подразделении</span>
                </label>
            </div>

            <!-- Элементы формы -->
            <div id="form-elements">
                <!-- Реальные решения -->
                <div class="mb-6">
                    <label class="block text-gray-600 mb-2">Реальные решения:</label>
                    <div id="realSolutionsContainer">
                        @if($vulnerability->realSolutions !== null && $vulnerability->realSolutions->count() > 0)
                        @foreach($vulnerability->realSolutions as $solution)
                        <div class="real-solution-group bg-gray-50 p-4 rounded-lg shadow mb-4" data-solution-id="{{ $solution->id }}">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-semibold text-gray-700">Реальное решение #{{ $loop->iteration }}</h3>
                                <!-- Крестик для удаления -->
                                <button type="button" class="text-red-500 hover:text-red-700 remove-real-solution">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                            <!-- Контейнер Quill с ограниченной высотой -->
                            <div class="quill-editor h-48" data-solution-id="{{ $solution->id }}">{!! $solution->solution !!}</div>
                            <input type="hidden" name="real_solutions[{{ $solution->id }}]" class="quill-html">

                            <!-- Поле загрузки файла -->
                            <label class="block text-gray-600 mt-2">Загрузить файл:</label>
                            <input type="file" name="real_solutions_files[{{ $solution->id }}]" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">

                            @if ($solution->path_to_file !== null)
                            <a href="{{ route('download.file', $solution->id) }}" target="_blank" class="mt-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300">Скачать файл</a>
                            @endif
                        </div>
                        @endforeach
                        @endif
                    </div>
                    <button type="button" id="addRealSolution" class="mt-3 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300">Добавить новое реальное решение</button>
                </div>

                <!-- Компенсирующие решения -->
                <div class="mb-6">
                    <label class="block text-gray-600 mb-2">Компенсирующие решения:</label>
                    <div id="compensatingSolutionsContainer">
                        <select id="compensatingSolutionsSelect" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 select2">
                            @foreach($compensating as $solution)
                            @if(!$vulnerability->compensatingSolutions->contains($solution->id))
                            <option value="{{ $solution->id }}">{{ $solution->measure }}</option>
                            @endif
                            @endforeach
                        </select>
                        <button type="button" id="addCompensatingSolution" class="mt-3 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300">Добавить решение</button>
                    </div>
                    <div id="selectedCompensatingSolutionsContainer" class="mt-4">
                        @if ($vulnerability->compensatingSolutions !== null)
                        @foreach($vulnerability->compensatingSolutions as $solution)
                        <div class="selected-solution mb-2 flex items-center" data-id="{{ $solution->id }}">
                            <span class="text-gray-700">{{ $solution->measure }}</span>
                            <button type="button" class="ml-2 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition duration-300 remove-solution">Удалить</button>
                            <input type="hidden" name="compensating_solutions[]" value="{{ $solution->id }}">
                        </div>
                        @endforeach
                        @endif
                    </div>
                </div>
            </div>

            <!-- Кнопки -->
            <div class="flex justify-between mt-6">
                <button type="submit" class="px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition duration-300">Сохранить</button>
                <a href="{{ route('report.all_vulnerabilites', $document->id) }}" class="px-6 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition duration-300">Отмена</a>
            </div>
        </form>
    </div>
</div>

@section('scripts')
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        
        // Функция для скрытия/отображения элементов формы
        function toggleFormElements() {
            const notUsedCheckbox = document.getElementById('not_used');
            const formElements = document.getElementById('form-elements');

            if (notUsedCheckbox.checked) {
                formElements.style.display = 'none';
            } else {
                formElements.style.display = 'block';
            }
        }

        // Инициализация состояния формы при загрузке страницы
        toggleFormElements();

        // Обработчик изменения состояния чекбокса
        document.getElementById('not_used').addEventListener('change', toggleFormElements);

        // Добавление нового реального решения
        document.getElementById('addRealSolution').addEventListener('click', function() {
            const container = document.getElementById('realSolutionsContainer');
            const solutionGroup = document.createElement('div');
            solutionGroup.className = 'real-solution-group bg-gray-50 p-4 rounded-lg shadow mb-4';

            const header = document.createElement('div');
            header.className = 'flex justify-between items-center mb-4';
            const headerText = document.createElement('h3');
            headerText.className = 'text-lg font-semibold text-gray-700';
            headerText.textContent = 'Реальное решение #' + (container.children.length + 1);
            header.appendChild(headerText);

            // Крестик для удаления
            const removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.className = 'text-red-500 hover:text-red-700 remove-real-solution';
            removeButton.innerHTML = `
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
    `;
            header.appendChild(removeButton);
            solutionGroup.appendChild(header);

            // Контейнер Quill с ограниченной высотой
            const quillContainer = document.createElement('div');
            quillContainer.className = 'quill-editor h-48';
            solutionGroup.appendChild(quillContainer);

            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'new_real_solutions[]';
            hiddenInput.className = 'quill-html';
            solutionGroup.appendChild(hiddenInput);

            // Поле загрузки файла
            const fileInputLabel = document.createElement('label');
            fileInputLabel.className = 'block text-gray-600 mt-2';
            fileInputLabel.textContent = 'Загрузить файл:';
            solutionGroup.appendChild(fileInputLabel);

            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.name = 'new_real_solutions_files[]';
            fileInput.className = 'w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500';
            solutionGroup.appendChild(fileInput);

            // Вставляем новое решение перед кнопкой
            container.appendChild(solutionGroup); // Просто добавляем в конец контейнера

            const quill = new Quill(quillContainer, {
                theme: 'snow',
                modules: {
                    toolbar: [
                        [{
                            'header': [1, 2, 3, 4, 5, 6, false]
                        }],
                        ['bold', 'italic', 'underline', 'strike'],
                        [{
                            'color': []
                        }, {
                            'background': []
                        }],
                        [{
                            'list': 'ordered'
                        }, {
                            'list': 'bullet'
                        }],
                        ['link', 'image'],
                        ['clean']
                    ]
                }
            });

            quill.on('text-change', function() {
                hiddenInput.value = quill.root.innerHTML;
            });

            hiddenInput.value = quill.root.innerHTML;

            // Добавляем обработчик удаления для нового решения
            removeButton.addEventListener('click', function() {
                solutionGroup.remove();
            });
        });

        // Удаление реального решения
        document.querySelectorAll('.remove-real-solution').forEach(function(button) {
            button.addEventListener('click', function() {
                const solutionGroup = button.closest('.real-solution-group');
                solutionGroup.remove();
            });
        });

        // Инициализация Quill для существующих реальных решений
        document.querySelectorAll('.quill-editor').forEach(function(editorContainer) {
            const solutionId = editorContainer.dataset.solutionId;
            const hiddenInput = editorContainer.nextElementSibling;

            const quill = new Quill(editorContainer, {
                theme: 'snow',
                modules: {
                    toolbar: [
                        [{
                            'header': [1, 2, 3, 4, 5, 6, false]
                        }],
                        ['bold', 'italic', 'underline', 'strike'],
                        [{
                            'color': []
                        }, {
                            'background': []
                        }],
                        [{
                            'list': 'ordered'
                        }, {
                            'list': 'bullet'
                        }],
                        ['link', 'image'],
                        ['clean']
                    ]
                }
            });

            quill.on('text-change', function() {
                hiddenInput.value = quill.root.innerHTML;
            });

            hiddenInput.value = quill.root.innerHTML;
        });

        // Добавление компенсирующего решения
        document.getElementById('addCompensatingSolution').addEventListener('click', function() {
            const selectedOption = document.getElementById('compensatingSolutionsSelect').options[document.getElementById('compensatingSolutionsSelect').selectedIndex];
            if (selectedOption && selectedOption.value) {
                const solutionDiv = document.createElement('div');
                solutionDiv.className = 'selected-solution mb-2 flex items-center';
                solutionDiv.dataset.id = selectedOption.value;
                solutionDiv.innerHTML = `
                    <span class="text-gray-700">${selectedOption.text}</span>
                    <button type="button" class="ml-2 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition duration-300 remove-solution">Удалить</button>
                    <input type="hidden" name="compensating_solutions[]" value="${selectedOption.value}">
                `;
                document.getElementById('selectedCompensatingSolutionsContainer').appendChild(solutionDiv);
                selectedOption.remove();
            }
        });

        // Удаление компенсирующего решения
        document.getElementById('selectedCompensatingSolutionsContainer').addEventListener('click', function(event) {
            if (event.target.classList.contains('remove-solution')) {
                const solutionDiv = event.target.closest('.selected-solution');
                const solutionId = solutionDiv.dataset.id;
                const option = document.createElement('option');
                option.value = solutionId;
                option.text = solutionDiv.firstChild.textContent.trim();
                document.getElementById('compensatingSolutionsSelect').appendChild(option);
                solutionDiv.remove();
            }
        });

        // Инициализация Select2
        $('.select2').select2({
            language: {
                noResults: function() {
                    return `<button type="button" class="btn btn-secondary btn-sm" id="addNewCompensatingSolutionInSelect">Добавить новое решение</button>`;
                }
            },
            escapeMarkup: function(markup) {
                return markup;
            }
        });

        // Обработка клика по кнопке "Добавить новое решение" внутри Select2
        $(document).on('click', '#addNewCompensatingSolutionInSelect', function() {
            const newSolutionText = document.querySelector('.select2-search__field').value;

            if (newSolutionText) {
                fetch("{{ route('save.compensating.solution') }}", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': '{{ csrf_token() }}'
                        },
                        body: JSON.stringify({
                            measure: newSolutionText
                        })
                    }).then(response => response.json())
                    .then(data => {
                        if (data.id) {
                            const option = document.createElement('option');
                            option.value = data.id;
                            option.text = newSolutionText;
                            document.getElementById('compensatingSolutionsSelect').appendChild(option);
                            $('#compensatingSolutionsSelect').val(data.id).trigger('change');
                            $('.select2-search__field').val('');
                            $('#compensatingSolutionsSelect').select2('close');
                        }
                    });
            }
        });
    });
</script>
@endsection

<style>
    .ql-container {
        height: 12rem !important;
    }
</style>